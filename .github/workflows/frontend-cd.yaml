name: Frontend Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  Linting:
    runs-on: ubuntu-latest
    environment: 
      name: development
    steps:
      - name: Check the Repository
        uses: actions/checkout@v3

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json

      - name: Install Dependencies
        working-directory: starter/frontend
        run: npm ci

      - name: Run Lint
        run: npm run lint --prefix starter/frontend

  Test:
    runs-on: ubuntu-latest
    steps:
      - name: Check the Repository
        uses: actions/checkout@v3

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json

      - name: Install Dependencies
        working-directory: starter/frontend
        run: npm ci

      - name: Run Tests
        run: npm run test --prefix starter/frontend

  Build:
    needs: [Linting, Test]
    runs-on: ubuntu-latest
    steps:
      - name: Check the Repository
        uses: actions/checkout@v3

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        working-directory: starter/frontend
        env:
          IMAGE_TAG: latest
          REPO_NAME: frontend
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG .
          docker push $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG

      - name: Configure Kubeconfig
        run: |
          aws eks update-kubeconfig --name udacity-project --region us-east-1

      - name: Deploy Docker Image to Amazon EKS
        working-directory: starter/frontend/k8s
        env:
          IMAGE_TAG: latest
          REPO_NAME: frontend
        run: |
          kustomize edit set image frontend=$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG
          kustomize build | kubectl apply -f -


# steps to include:

  # 1. run linting and passes

  # 2. runs tests and passes

  # 3. builds app using docker ONLY after linting and testing are complete (use needs). 
  # This step should also include build-args to ensure app is built with env variable REACT_APP_MOVIE_API_URL

  # 4. utilizes aws-actions/amazon-ecr-login for logging into ECR (using 3rd party actions)
  # also access github secrets for credentials for security

  # 5. push docker image to ECR in aws

  # 6. deploy app via kubectl to EKS cluster

  # The pipeline should be executed automatically on merges to the main branch 
  #The pipeline should be able to be run manually for verification purposes 
  # The pipeline should be running without errors, with all tests passing and no output failures from any of the steps

  # tests to check: 
    #If there are AWS credentials anywhere in any of the pipelines = FAIL
    #If any of the pipelines are failing to run or have failed steps = FAIL
    #If any of the pipelines pass when there's a test failure = FAIL (will provide steps on how to simulate test failure)
    #If the docker image doesn't get uploaded to ECR = FAIL
    #If the application isn't successfully running on the cluster = FAIL (the frontend should be able to pull the list of movies and verify the environment variable was passed correctly)